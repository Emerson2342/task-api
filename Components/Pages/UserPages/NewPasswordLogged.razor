@page "/change-password"

@inject HttpClient Http
@using System.Net.Http.Headers
@using TaskList.Components.Domain.Main.DTOs.UserDTOs
@using TaskList.Components.Domain.Main.UseCases.ResponseCase

@inject NavigationManager NavManager
@rendermode InteractiveServer
@inject HttpClient Http
@inject Authenticationservice Authenticationservice

<div style="width:100%;display:flex;flex-direction:column;align-items:center">
    <h3>Alterar a Senha</h3>

    <div>
        <img src="images/newPassword.jpg" alt="Imagem Novo Usuario" />
    </div>
    <EditForm style="width:30%" Model="model" OnSubmit="HandleSubmit" FormName="passwordUserForm">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="Email" class="form-label">Nova Senha</label>
            <InputText class="form-control" placeHolder="Digite a nova senha" type="text" id="Password" @bind-Value="model.NewPassword" />
        </div>
        <div style="display:flex;justify-content:center">
            <button class="btn btn-success" style="width:50%" type="submit">Alterar senha</button>
        </div>
        <div class="mt-3" style="display:flex;justify-content:center">
            <a class="btn btn-primary" style="width:50%" href="/task-list">Voltar</a>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(responseMessage))
    {
        <div class="alert alert-info mt-3 mx-auto text-center" style="width:50%;">
            @responseMessage
        </div>
    }
</div>

@code {
    [SupplyParameterFromForm]
    private RequestPassword model { get; set; } = new();

    private string LocalHost = Configuration.Ip.LocalHost;

    private string? responseMessage;
    string token = string.Empty;
    string userId = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await Authenticationservice.GetTokenAsync();
            userId = await Authenticationservice.GetUserIdAsync();
             if (string.IsNullOrWhiteSpace(token))
                 NavManager.NavigateTo("/authorize");
        }
    }

    private async Task<Response> HandleSubmit()
    {
        try
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var url = $"https://localhost:7103/user/change-password-in";

            var response = await Http.PostAsJsonAsync(url, model);

            var result = await response.Content.ReadFromJsonAsync<Response>();

            if (result == null)
            {
                responseMessage = "Erro ao ler os dados JSON";
                return new Response("Erro ao ler os dados do JSON", 400);
            }

            responseMessage = result.Message;
            model.NewPassword = string.Empty;

            return result;
        }
        catch (Exception e)
        {
            responseMessage = $"Erro ao acessar - {e.Message}";
            return new Response($"Erro ao acessar - {e.Message}", 400);
        }



    }

}
