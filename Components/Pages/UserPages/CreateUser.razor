@page "/create-user"
@using TaskList.Components.Domain.Infra.Data
@using TaskList.Components.Domain.Main.Controllers
@using TaskList.Components.Domain.Main.DTOs
@using TaskList.Components.Domain.Main.DTOs.UserDTOs
@using TaskList.Components.Domain.Main.Entities
@using TaskList.Components.Domain.Main.UseCases.ResponseCase
@using TaskList.Components.Domain.Main.ValueObjects
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Context
@inject HttpClient Http


<h3 style="text-align:center;width:100%">Criar Conta</h3>

<div style="display: flex;justify-content: center;align-items: center;width: 90%;">
    <div>
        <img src="images/newUser.png" alt="Imagem Novo Usuario" />
    </div>
    <div style="width:25%">
        <EditForm Model="model" OnSubmit="HandleSubmit" FormName="createUserForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-1">
                <label for="Name" class="form-label">Nome</label>
                <InputText class="form-control" id="Name" style="text-align:center" placeHolder="Digite seu nome" @bind-Value="model.Name" />
            </div>
            <div class="mb-3">
                <label for="Email" class="form-label">Email</label>
                <InputText class="form-control" type="email" id="Email" style="text-align:center" placeHolder="Digite seu email" @bind-Value="model.Email" />

            </div>
            <div class="mb-3">
                <label for="Password" class="form-label">Senha</label>
                <InputText class="form-control" type="password" style="text-align:center" placeHolder="Digite sua senha" id="Password" @bind-Value="model.Password" />

            </div>

            <button class="btn btn-success" type="submit" style="width:100%">Criar Usuário</button>
            <a class="btn btn-primary" href="/home" style="width:100%;margin-top:3%">Voltar</a>
        </EditForm>
    </div>
</div>


@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-info mt-3">
        @responseMessage
    </div>
}

@code {
    [SupplyParameterFromForm]
    private RequestCreateUser model { get; set; } = new();


    private string? responseMessage;

    private async Task<Response> HandleSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("user/create", model);

            var result = await response.Content.ReadFromJsonAsync<Response>();

            if (result == null)
            {
                responseMessage = "Erro ao ler os dados JSON";
                return new Response("Erro ao ler os dados do JSON", 400);
            }
            responseMessage = result.Message;
            model.Name = string.Empty;
            model.Email = string.Empty;
            model.Password = string.Empty;

            return result;
        }catch (Exception e)
        {
            responseMessage = $"Erro ao acessar - {e.Message}";
            return new Response($"Erro ao acessar - {e.Message}", 400);
        }       

    }
}
