@page "/reset-password/{token}"

@inject HttpClient Http
@using TaskList.Components.Domain.Main.DTOs.UserDTOs
@using TaskList.Components.Domain.Main.UseCases.ResponseCase

<h3>Digite a nova senha</h3>

<EditForm Model="model" OnSubmit="HandleSubmit" FormName="passwordUserForm">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <div class="mb-3">
        <label for="Email" class="form-label">Nova Senha</label>
        <InputText class="form-control" type="text" id="Password" @bind-Value="model.NewPassword" />
        <ValidationMessage For="@(() => model.NewPassword)" />
    </div>

    <button class="btn btn-success" type="submit">Alterar senha</button>
</EditForm>

@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-info mt-3 mx-auto text-center" style="width:50%;">
        @responseMessage
    </div>
}

@code {
    [SupplyParameterFromForm]
    private RequestPassword model { get; set; } = new();

    private string? responseMessage;

    [Parameter]
    public string Token { get; set; } = string.Empty;

    private async Task<Response> HandleSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"user/reset-password/{Token}", model);

            var result = await response.Content.ReadFromJsonAsync<Response>();
            if (result == null)
            {
                responseMessage = "Erro ao ler os dados JSON";
                return new Response("Erro ao ler os dados do JSON", 400);
            }
            responseMessage = result.Message;
            model.NewPassword = string.Empty;

            return result;
        }catch(Exception e){
            responseMessage = $"Erro ao acessar - {e.Message}";
            return new Response($"Erro ao acessar - {e.Message}", 400);
        }
    }

}
