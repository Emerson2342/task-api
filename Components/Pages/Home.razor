@page "/home"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity
@using TaskList.Components.Domain.Infra.Data
@using TaskList.Components.Domain.Main.DTOs.UserDTOs
@using TaskList.Components.Domain.Main.Entities
@using TaskList.Components.Domain.Main.UseCases.ResponseCase
@using Blazored.SessionStorage
@rendermode InteractiveServer

@inject NavigationManager NavManager
@inject AppDbContext Context
@inject HttpClient Http
@inject Authenticationservice Authenticationservice

<PageTitle>Seja bem vindo</PageTitle>
<h1 style="text-align:center;width:100%">Lista de Tarefas</h1>
<div style="display: flex;
    justify-content: center;
    align-items: center;
    width: 90%;">
    <div>
        <img src="images/homePage.jpg" alt="Imagem da Home Page" />
    </div>
    <div style="width: 30%">
        <EditForm Model="model" OnSubmit="HandleSubmit" FormName="taskForm">
            <div style="padding-bottom:5%">
                <label for="Password" class="form-label">Login</label>
                <InputText style="text-align:center" class="form-control" placeHolder="nome@email.com" id="email" @bind-Value="model.Email" />
            </div>

            <div class="inputContent">
                <label for="Password" class="form-label">Senha</label>
                <InputText style="text-align:center" class="form-control" placeHolder="**********" id="Title" @bind-Value="model.Password" />
            </div>

            <button class="btn btn-success" style="width:100%;margin-top:3%" type="submit">Entrar</button>
            <div style="padding: 3%;width: 100%;display: flex;flex-direction: column;align-items: center">
                <a href="forgot-password">Esqueceu a senha?</a>
                <a href="create-user">Não tem conta?</a>
            </div>
        </EditForm>
    </div>

</div>

@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-info mt-3 mx-auto text-center" style="width:50%;">
        @responseMessage
    </div>
}

@code {

    [SupplyParameterFromForm]
    private RequestLogin model { get; set; } = new();

    string token = string.Empty;
    Guid userId;
    string tokenStored = string.Empty;
    string userIdStored = string.Empty;
    private string responseMessage = string.Empty;

    private async Task<Response> HandleSubmit()
    {
        var result = await Authenticationservice.Login(model);
        token = result.User.Token;
        userId = result.User.UserId;

        responseMessage = result.Message;
        if (result.IsSuccess)
        {
            var res = await Authenticationservice.StoreTokenAsync(token);
            await Authenticationservice.StoreUserIdAsync(userId);
            var id = await Authenticationservice.GetUserIdAsync();

            if (res)
              { NavManager.NavigateTo("/task-list");}
              else
              {
                  NavManager.NavigateTo("/authorize");
              }
        }
        return result;
    }

}