@page "/home"
@using TaskList.Components.Domain.Infra.Data
@using TaskList.Components.Domain.Main.DTOs.UserDTOs
@using TaskList.Components.Domain.Main.UseCases.ResponseCase

@inject NavigationManager NavManager
@inject AppDbContext Context
@inject HttpClient Http
@inject Authenticationservice Authenticationservice
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>Seja bem vindo</PageTitle>
<h1 style="text-align:center;width:100%">Lista de Tarefas</h1>
<div style="display: flex;
    justify-content: center;
    align-items: center;
    width: 90%;">
    <div>
        <img src="images/homePage.jpg" alt="Imagem da Home Page" />
    </div>
    <div style="width: 30%">
        <EditForm Model="model" OnSubmit="HandleSubmit" FormName="taskForm">
            <div style="padding-bottom:5%">
                <label for="Password" class="form-label">Login</label>
                <InputText style="text-align:center" class="form-control" placeHolder="nome@email.com" id="email" @bind-Value="model.Email" />
            </div>

            <div class="inputContent">
                <label for="Password" class="form-label">Senha</label>
                <InputText style="text-align:center" class="form-control" placeHolder="**********" id="Title" @bind-Value="model.Password" />
            </div>

            <button class="btn btn-success" style="width:100%;margin-top:3%" type="submit">Entrar</button>
            <div style="padding: 3%;width: 100%;display: flex;flex-direction: column;align-items: center">
                <a href="forgot-password">Esqueceu a senha?</a>
                <a href="create-user">Não tem conta?</a>
            </div>
        </EditForm>
    </div>


</div>

@if (!string.IsNullOrEmpty(responseMessage))
{

    <div class="alert alert-info mt-3 mx-auto text-center" style="width:50%;">
        @responseMessage
    </div>

}

@code {

    [SupplyParameterFromForm]
    private RequestLogin model { get; set; } = new();

    string token = string.Empty;
    string tokenStored = string.Empty;
    private string responseMessage = string.Empty;

    private async Task<Response> HandleSubmit()
    {
        var result = await Authenticationservice.Login(model);
        token = result.Token;
        responseMessage = result.Message;
        if (result.IsSuccess)
        {
            NavManager.NavigateTo("/task-list");
        }

        return result;

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        responseMessage = "Iniciou";
        StateHasChanged();
    }

    private async Task SaveToken()
    {
        await sessionStorage.SetItemAsync("authToken", token);
        tokenStored = await sessionStorage.GetItemAsync<string>("authToken");
        responseMessage = "Token salvo com sucesso!";
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {

    //     if (firstRender)
    //     {
    //         if (!string.IsNullOrEmpty(token))
    //         {
    //             await sessionStorage.SetItemAsync("authToken", token);
    //             tokenStored = await sessionStorage.GetItemAsync<string>("authToken");
    //         }
    //         else
    //         {
    //             responseMessage = "Token não vazio";
    //         }

    //         token = string.Empty;
    //         //StateHasChanged();
    //     }

    // }
}