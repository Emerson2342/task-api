@page "/create-task"
@using System.Net.Http.Headers
@using global::TaskList.Components.Domain.Infra.Data
@using global::TaskList.Components.Domain.Main.DTOs.TaskDTOs
@using global::TaskList.Components.Domain.Main.UseCases.ResponseCase


@inject NavigationManager NavManager
@inject HttpClient Http
@inject Authenticationservice Authenticationservice
@rendermode InteractiveServer

<h3>Criar nova tarefa</h3>

<EditForm Model="model" OnSubmit="HandleSubmit" FormName="taskForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-1">
        <label for="Title" class="form-label">Título</label>
        <InputText class="form-control" id="Title" @bind-Value="model.Title" />
    </div>
    <div class="mb-3">
        <label for="Text" class="form-label">Descrição</label>
        <InputText class="form-control" id="Description" @bind-Value="model.Description" />

    </div>
    <div class="mb-3">
        <label for="StartTime" class="form-label">Data de Início</label>
        <InputDate class="form-control" id="Password" @bind-Value="model.StartTime" />

    </div>
    <div class="mb-3">
        <label for="Deadline" class="form-label">Data do Término</label>
        <InputDate class="form-control" id="Deadline" @bind-Value="model.Deadline" />

    </div>

    <button class="btn btn-success" type="submit">Criar Tarefa</button>
    <a class="btn btn-primary" href="/task-list">Voltar</a>
</EditForm>

@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-info mt-3">
        @responseMessage
    </div>
}


@code {

    [SupplyParameterFromForm]
    private RequestTask model { get; set; } = new();

    private string token = string.Empty;
    private string userId = string.Empty;

    private string? responseMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userId = await Authenticationservice.GetUserIdAsync();
            token = await Authenticationservice.GetTokenAsync();
            if (string.IsNullOrWhiteSpace(token))
                NavManager.NavigateTo("/authorize");
            StateHasChanged();
        }
    }

    private async Task<Response> HandleSubmit()
    {

        model.UserId = Guid.Parse(userId);
        var url = "https://localhost:7103/task/create";

        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.PostAsJsonAsync(url, model);

        var result = await response.Content.ReadFromJsonAsync<Response>();
        if (result == null) return new Response("", StatusCodes.Status400BadRequest);
        if (result.IsSuccess)
            NavManager.NavigateTo("/task-list");
        else
            responseMessage = result.Message;
        return result;
    }
}
