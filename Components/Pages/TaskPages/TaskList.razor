@page "/task-list"

@using Microsoft.EntityFrameworkCore
@using System.Net.Http.Headers
@using global::TaskList.Components.Domain.Infra.Data
@using global::TaskList.Components.Domain.Main.Entities
@using global::TaskList.Components.Domain.Main.Services
@using global::TaskList.Components.Domain.Main.UseCases.ResponseCase
@using static global::TaskList.Components.Domain.Main.Entities.TaskEntity

@inject AppDbContext Context
@inject HttpClient Http
@inject Authenticationservice authenticationservice

@if (string.IsNullOrEmpty(token))
{
    <p>Acesso restrito</p>
    <NavLink href="/home" class="btn btn-primary">Login</NavLink>
}
else
{
    <h3>Lista de Tarefas</h3>
    <p> Token @token</p>
    <table class="table">
        <thead>
            <tr>
                <td>Ord</td>
                <td>Nome</td>
                <td>Descrição</td>
                <td>Início</td>
                <td>Término</td>
            </tr>
        </thead>
        <tbody>

            @foreach (var task in _tasks)
            {

                <tr>
                    <td>@count++</td>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.StartTime.ToShortDateString()</td>
                    <td>@task.Deadline.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>

    


    @if (!string.IsNullOrEmpty(responseMessage))
    {
        <div class="alert alert-info mt-3">
            @responseMessage
        </div>
    }
}
<p>Token armazenado: @token</p>



@code {
    int count = 1;
    List<TaskEntity> _tasks = new();

    string responseMessage = string.Empty;
    string token = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            token = await authenticationservice.GetTokenAsync();
            System.Diagnostics.Debug.WriteLine($"Token: {token}");
            await LoadTasks();

        }
        StateHasChanged();
    }

    private async Task LoadTasks()
    {
        try
        {
            var requestMessage = new HttpRequestMessage(HttpMethod.Get, "task/list");
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(requestMessage);
            var result = await response.Content.ReadFromJsonAsync<Response>();

            _tasks = result.TasksList;
        }
        catch (Exception ex)
        {
            responseMessage = ex.Message;
        }
    }

}
