@page "/task-list"

@using Microsoft.EntityFrameworkCore
@using System.Net.Http.Headers
@using global::TaskList.Components.Domain.Infra.Data
@using global::TaskList.Components.Domain.Main.Entities
@using global::TaskList.Components.Domain.Main.Services
@using global::TaskList.Components.Domain.Main.UseCases.ResponseCase
@using static global::TaskList.Components.Domain.Main.Entities.TaskEntity

@inject AppDbContext Context
@inject HttpClient Http
@inject Authenticationservice authenticationservice

@if (!string.IsNullOrEmpty(token))
{
    <p>Acesso restrito</p>
    <NavLink href="/home" class="btn btn-primary">Login</NavLink>
}
else
{
    <h3>Lista de Tarefas</h3>
    <table class="table">
        <thead>
            <tr>
                <td>Ord</td>
                <td>Nome</td>
                <td>Descrição</td>
                <td>Início</td>
                <td>Término</td>
            </tr>
        </thead>
        <tbody>

            @foreach (var task in _tasks)
            {

                <tr>
                    <td>@count++</td>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.StartTime.ToShortDateString()</td>
                    <td>@task.Deadline.ToShortDateString()</td>
                    <td>
                        <div class="btn-group" role="group" aria-label="Third group">
                            <a class="btn btn-primary" href="/task-list/edit/@task.Id">Editar</a>
                            <a class="btn btn-danger" href="/task-list/delete/@task.Id">Apagar</a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <a href="create-task" class="btn btn-primary"><i class="oi oi-plus"></i> Adicionar Tarefa </a>


    @if (!string.IsNullOrEmpty(responseMessage))
    {
        <div class="alert alert-info mt-3">
            @responseMessage
        </div>
    }
}

@code {
    int count = 1;
    List<TaskEntity> _tasks = new();

    string responseMessage = string.Empty;
    string token = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("task/list");
        var result = await response.Content.ReadFromJsonAsync<Response>();
        _tasks = result.TasksList;
        responseMessage = result.Message;
    }
}
