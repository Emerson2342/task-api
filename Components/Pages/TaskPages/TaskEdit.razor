@page "/task-list/edit/{id:guid}"


@using global::TaskList.Components.Domain.Infra.Data
@using global::TaskList.Components.Domain.Main.DTOs.TaskDTOs
@using global::TaskList.Components.Domain.Main.Entities
@using global::TaskList.Components.Domain.Main.UseCases.ResponseCase


@inject HttpClient Http;

<h3>Editar</h3>
<p>@model.Id</p>

<EditForm Model="model" OnSubmit="HandleEdit" FormName="taskEditForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-1">
        <label for="Title" class="form-label">Título</label>
        <InputText class="form-control" placeholder="@modelIn.Title" id="Title" @bind-Value="model!.Title" />
    </div>
    <div class="mb-3">
        <label for="Text" class="form-label">Descrição</label>
        <InputText class="form-control" placeholder="@modelIn.Description" id="Description"
            @bind-Value="model.Description" />

    </div>
    <div class="mb-3">
        <label for="StartTime" class="form-label">Data de Início</label>
        <InputDate class="form-control" placeholder="@modelIn.StartTime" id="Password" @bind-Value="model.StartTime" />

    </div>
    <div class="mb-3">
        <label for="Deadline" class="form-label">Data do Término</label>
        <InputDate DisplayName="ssss" placeholder="@modelIn.Deadline" class="form-control" id="Deadline"
            @bind-Value="model.Deadline" />

    </div>

    <button class="btn btn-success" type="submit">Alterar Tarefa</button>
</EditForm>

@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-info mt-3">
        @responseMessage
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [SupplyParameterFromForm]
    private RequestTask model { get; set; } = new();

    private RequestTask modelIn = new();
    private RequestTask taskEdited = new();
    private string? responseMessage;

    protected override async Task OnInitializedAsync()
    {
        //var response = await Http.GetAsync($"task/task/{Id}");
        //Response result = await response.Content.ReadFromJsonAsync<Response>();
        model.Id = Id;
        modelIn.Title = "Segunda-Feira";
        modelIn.Description = "Iniciando a semana com estágio";
        modelIn.StartTime = DateTime.UtcNow;
        modelIn.Deadline = DateTime.UtcNow.AddDays(2);
        responseMessage = "Iniciou";
    }

    private void HandleEdit()
    {
        //var response = await Http.PostAsJsonAsync("task/edit", taskEdited);

        // var result = await response.Content.ReadFromJsonAsync<Response>();

        responseMessage = $"Título editado: {model.Title}";


        //return response;
    }
}
