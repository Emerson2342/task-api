@page "/task-list/edit/{id:guid}"


@using System.Net.Http.Headers
@using global::TaskList.Components.Domain.Infra.Data
@using global::TaskList.Components.Domain.Main.DTOs.TaskDTOs
@using global::TaskList.Components.Domain.Main.Entities
@using global::TaskList.Components.Domain.Main.UseCases.ResponseCase

@rendermode InteractiveServer
@inject HttpClient Http;
@inject Authenticationservice Authenticationservice

@if (string.IsNullOrEmpty(token))
{
    <Authorize />
}
else
{
    <h3>Editar Tarefa</h3>

    <EditForm Model="@Model" OnValidSubmit="HandleEdit" FormName="taskEditForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-1">
            <label for="Title" class="form-label">Título</label>
            <InputText class="form-control" placeHolder="@ModelIn.Title" id="Title" @bind-Value="Model.Title" />
        </div>
        <div class="mb-3">
            <label for="Text" class="form-label">Descrição</label>
            <InputText class="form-control" id="Description"
                       @bind-Value="Model.Description" />

        </div>
        <div class="mb-3">
            <label for="Deadline" class="form-label">Data de Início</label>
            <InputDate class="form-control" id="StartTime" @bind-Value="Model.StartTime" />

        </div>
        <div class="mb-3">
            <label for="Deadline" class="form-label">Data de Término</label>
            <InputDate class="form-control" id="Deadline" @bind-Value="Model.Deadline" />
        </div>

        <button class="btn btn-success" type="submit">Alterar Tarefa</button>
        <a class="btn btn-primary" href="/task-list">Voltar</a>
    </EditForm>


}
@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-info mt-3">
        @responseMessage
    </div>
}



@code {
    [Parameter]
    public Guid Id { get; set; }

    [SupplyParameterFromForm]
    private RequestTask Model { get; set; } = new();
    private RequestTask ModelIn { get; set; } = new();

    private string LocalHost = Configuration.Ip.LocalHost;

    private RequestTask taskEdited = new();
    private string token = string.Empty;
    private string? responseMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await Authenticationservice.GetTokenAsync();
            await OnInitializedAsync();
        }
    }
    new private async Task OnInitializedAsync()
    {

       // var url = $"https://{LocalHost}/task/task/{Id}";
        var url = $"https://localhost:7103/task/task/{Id}";
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await Http.GetAsync(url);
        var result = await response.Content.ReadFromJsonAsync<Response>();

        if (result == null)
        {
            responseMessage = "Erro ao ler os dados JSON";
            return;
        }

        if (result.TaskList != null)
        {
            Model.Title = result.TaskList.Title;
            Model.Description = result.TaskList.Description;
            Model.StartTime = result.TaskList.StartTime;
            Model.Deadline = result.TaskList.Deadline;
            StateHasChanged();
        }
    }

    public async Task<Response> HandleEdit()
    {
        try
        {
            Model.Id = Id;
            taskEdited = Model;

            var url = $"https://{LocalHost}/task/edit";

            var response = await Http.PostAsJsonAsync(url, taskEdited);

            var result = await response.Content.ReadFromJsonAsync<Response>();
            if (result == null)
            {
                responseMessage = "Erro ao ler os dados JSON";
                return new Response("Erro ao ler os dados do JSON", 400);
            }
            responseMessage = result.Message;

            return result;
        }
        catch (Exception e)
        {
            responseMessage = $"Erro ao acessar - {e.Message}";
            return new Response($"Erro ao acessar - {e.Message}", 400);
        }


    }
}
