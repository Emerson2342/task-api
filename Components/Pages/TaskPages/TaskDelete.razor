@page "/task-list/delete/{id:guid}"


@using global::TaskList.Components.Domain.Infra.Data
@using global::TaskList.Components.Domain.Main.DTOs.TaskDTOs
@using global::TaskList.Components.Domain.Main.Entities
@using global::TaskList.Components.Domain.Main.UseCases.ResponseCase

@inject NavigationManager NavManager


@inject HttpClient Http;

<h3>Deseja apagar a tarefa "@model.Title"?</h3>

<EditForm Model="model" OnSubmit="HandleDelete" FormName="taskEditForm">

    <div class="mb-1">
        <label for="Title" class="form-label">Título</label>
    <InputText readonly class="form-control" id="Title" @bind-Value="model.Title" />
    </div>
    <div class="mb-3">
        <label for="Text" class="form-label">Descrição</label>
    <InputText readonly class="form-control" id="Description" @bind-Value="model.Description" />

    </div>


<button class="btn btn-success" type="submit">Apagar Tarefa</button>
</EditForm>

@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-info mt-3">
        @responseMessage
    </div>
}



@code {
    [Parameter]
    public Guid Id { get; set; }

    private RequestTask model = new();
    //private TaskEntity model = new();
    private RequestTask taskToDelete = new();
    private string? responseMessage;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync($"task/task/{Id}");
        Response result = await response.Content.ReadFromJsonAsync<Response>();
        //model.Id = result.TaskList.Id;
        model.Title = result.TaskList.Title;
        model.Description = result.TaskList.Description;

        responseMessage = result.Message;
    }


    private async Task<Response> HandleDelete()
    {
        taskToDelete.Id = Id;
        var response = await Http.PostAsJsonAsync("task/delete", taskToDelete);

        var result = await response.Content.ReadFromJsonAsync<Response>();
        responseMessage = result.Message;

        NavManager.NavigateTo("task-list");
        return result;
    }
}
