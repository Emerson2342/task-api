@page "/task-list/delete/{id:guid}"


@using System.Net.Http.Headers
@using global::TaskList.Components.Domain.Infra.Data
@using global::TaskList.Components.Domain.Main.DTOs.TaskDTOs
@using global::TaskList.Components.Domain.Main.Entities
@using global::TaskList.Components.Domain.Main.UseCases.ResponseCase

@inject NavigationManager NavManager


@inject HttpClient Http;
@inject Authenticationservice Authenticationservice
@rendermode InteractiveServer


    <h3>Deseja apagar a tarefa "@model.Title"?</h3>

    <EditForm Model="model" OnSubmit="HandleDelete" FormName="taskEditForm">

        <div class="mb-1">
            <label for="Title" class="form-label">Título</label>
            <InputText readonly class="form-control" id="Title" @bind-Value="model.Title" />
        </div>
        <div class="mb-3">
            <label for="Text" class="form-label">Descrição</label>
            <InputText readonly class="form-control" id="Description" @bind-Value="model.Description" />
        </div>
        <button class="btn btn-success" type="submit">Apagar Tarefa</button>
        <a class="btn btn-warning" href="/task-list">Voltar</a>
    </EditForm>

    @if (!string.IsNullOrEmpty(responseMessage))
    {
        <div class="alert alert-info mt-3">
            @responseMessage
        </div>
    }


@code {
    [Parameter]
    public Guid Id { get; set; }

    private string LocalHost = Configuration.Ip.LocalHost;

    private RequestTask model = new();
    private string? responseMessage;
    private string token = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await Authenticationservice.GetTokenAsync();
             if (string.IsNullOrWhiteSpace(token))
                 NavManager.NavigateTo("/authorize");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            await OnInitializedAsync();
        }
    }

    new private async Task OnInitializedAsync()
    {
        try
        {
            //var url = $"https://{LocalHost}/task/task/{Id}";
            var url = $"https://localhost:7103/task/task/{Id}";

            var response = await Http.GetAsync(url);
            var result = await response.Content.ReadFromJsonAsync<Response>();
            if (result == null)
            {
                responseMessage = "Erro ao ler os dados JSON";
                return;
            }
            if (result.TaskList == null)
            {
                responseMessage = "Erro ao ler os dados JSON";
                return;
            }

            model.Title = result.TaskList.Title;
            model.Description = result.TaskList.Description;

            responseMessage = result.Message;
            StateHasChanged();

        }
        catch (Exception e)
        {
            responseMessage = $"Erro ao acessar - {e.Message}";
            return;
        }
    }

    private async Task<Response> HandleDelete()
    {
        try
        {
            model.Id = Id;
            var response = await Http.PostAsJsonAsync("task/delete", model);

            var result = await response.Content.ReadFromJsonAsync<Response>();
            if (result == null)
            {
                responseMessage = "Erro ao ler os dados JSON";
                return new Response("Erro ao ler os dados do JSON", 400);
            }
            responseMessage = result.Message;

            NavManager.NavigateTo("task-list");
            return result;
        }
        catch (Exception e)
        {
            responseMessage = $"Erro ao acessar - {e.Message}";
            return new Response($"Erro ao acessar - {e.Message}", 400);
        }

    }
}
